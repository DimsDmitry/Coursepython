1. Введение в работу с файлами

• Файлы — это способ хранения данных на диске.

• Python предоставляет простые и удобные способы работы с файлами через встроенные функции.

▎2. Открытие файлов

• Для работы с файлами необходимо их открыть с помощью функции open().

• Синтаксис:

  file = open('имя_файла', 'режим')


• Основные режимы открытия файлов:

  • 'r' — чтение (по умолчанию). Файл должен существовать.

  • 'w' — запись. Создает новый файл или перезаписывает существующий.

  • 'a' — добавление. Добавляет данные в конец файла.

  • 'b' — бинарный режим (например, 'rb', 'wb').

  • 't' — текстовый режим (по умолчанию).

▎3. Чтение из файлов

• Основные методы чтения:

  • read(size) — читает указанное количество байт (или символов) из файла.

  • readline() — читает одну строку из файла.

  • readlines() — читает все строки и возвращает их в виде списка.

Пример чтения файла:
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)


▎4. Запись в файлы

• Основные методы записи:

  • write(string) — записывает строку в файл.

  • writelines(list) — записывает список строк в файл.

Пример записи в файл:
with open('example.txt', 'w') as file:
    file.write("Hello, World!\n")
    file.writelines(["Line 1\n", "Line 2\n"])


▎5. Закрытие файлов

• После завершения работы с файлом его нужно закрыть с помощью метода close(). Однако, использование конструкции with
автоматически закрывает файл после выхода из блока.

Пример:
file = open('example.txt', 'r')
# операции с файлом
file.close()


▎6. Обработка исключений

• При работе с файлами важно обрабатывать возможные исключения, такие как:

  • FileNotFoundError — файл не найден.

  • IOError — ошибка ввода/вывода.

Пример обработки исключений:
try:
    with open('nonexistent.txt', 'r') as file:
        content = file.read()
except FileNotFoundError:
    print("Файл не найден.")


▎7. Работа с текстовыми и бинарными файлами

• Текстовые файлы содержат данные в виде текста и могут быть открыты в текстовом режиме.

• Бинарные файлы содержат данные в двоичном формате и открываются в бинарном режиме.

Пример работы с бинарным файлом:
with open('image.png', 'rb') as file:
    data = file.read()


▎8. Рекомендации по работе с файлами

• Используйте конструкцию with для автоматического управления ресурсами.

• Проверяйте наличие файла перед его открытием, если это необходимо.

• Обрабатывайте исключения для предотвращения сбоев программы.

Используйте параметр encoding:

with open('data.txt', 'w', encoding='UTF-8') as file:
    for i in range(10):
        file.write(f'Слово_{i}\n')