Python — это высокоуровневый язык программирования, известный своей простотой и читаемостью.
Одной из его мощных особенностей является возможность работы с произвольным количеством аргументов
в функциях с помощью *args и **kwargs.

▎1. Множественные аргументы

• Позиционные аргументы (*args):

  • Используется для передачи переменного числа позиционных аргументов в функцию.

  • Аргументы, переданные через *args, становятся кортежем внутри функции.

  Пример:

  def sum_all(*args):
      return sum(args)

  print(sum_all(1, 2, 3))  # Вывод: 6


• Именованные аргументы (**kwargs):

  • Используется для передачи произвольного количества именованных аргументов (пара "ключ: значение").

  • Аргументы, переданные через **kwargs, становятся словарем внутри функции.

  Пример:

  def print_info(**kwargs):
      for key, value in kwargs.items():
          print(f"{key}: {value}")

  print_info(name="Alice", age=30)
  # Вывод:
  # name: Alice
  # age: 30


▎2. Использование *args и **kwargs вместе

• Можно использовать одновременно и *args, и **kwargs в одной функции.

• Порядок объявления аргументов: сначала обычные, затем *args, затем именованные аргументы, и в конце **kwargs.

Пример:
def mixed_args(arg1, arg2, *args, **kwargs):
    print(f"arg1: {arg1}, arg2: {arg2}")
    print(f"args: {args}")
    print(f"kwargs: {kwargs}")

mixed_args(1, 2, 3, 4, name="Alice", age=30)
# Вывод:
# arg1: 1, arg2: 2
# args: (3, 4)
# kwargs: {'name': 'Alice', 'age': 30}


▎3. Применение *args и **kwargs

• Гибкость функций: Позволяет создавать более универсальные функции, которые могут обрабатывать различные входные данные.

• Упрощение кода: Уменьшает количество перегрузок функций для разных наборов аргументов.

• Работа с внешними библиотеками: Многие библиотеки используют *args и **kwargs для настройки своих функций.

▎4. Примеры использования

1. Сложение чисел:

   def add_numbers(*args):
       return sum(args)


2. Создание словаря из именованных аргументов:

   def create_dict(**kwargs):
       return kwargs


3. Функция с логированием:

   def log_function_call(func, *args, **kwargs):
       print(f"Calling {func.__name__} with args: {args} and kwargs: {kwargs}")
       return func(*args, **kwargs)



Использование *args и **kwargs в Python предоставляет мощные инструменты
для создания гибких и универсальных функций. Это позволяет разработчикам писать более чистый и поддерживаемый код,
а также упрощает работу с различными наборами данных. Понимание этих концепций является важным шагом в изучении программирования на языке Python.